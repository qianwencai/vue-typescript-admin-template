/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.0.6.0 (NJsonSchema v10.0.23.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';
import { AbpServiceBase } from './abp-service-base';

export class AccountServiceProxy extends AbpServiceBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(instance:AxiosInstance) {
        super();
        this.instance = instance;
        this.baseUrl = ""
    }

    /**
     * @param input (optional) 
     * @return Success
     */
    isTenantAvailable(input: IsTenantAvailableInput | null | undefined): Promise<IsTenantAvailableOutput> {
        let url_ = this.baseUrl + "/api/services/app/Account/IsTenantAvailable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processIsTenantAvailable(_response));
        });
    }

    protected processIsTenantAvailable(response: AxiosResponse): Promise<IsTenantAvailableOutput> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = IsTenantAvailableOutput.fromJS(resultData200, _mappings);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<IsTenantAvailableOutput>(<any>null);
    }

    /**
     * @param input (optional) 
     * @return Success
     */
    register(input: RegisterInput | null | undefined): Promise<RegisterOutput> {
        let url_ = this.baseUrl + "/api/services/app/Account/Register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRegister(_response));
        });
    }

    protected processRegister(response: AxiosResponse): Promise<RegisterOutput> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RegisterOutput.fromJS(resultData200, _mappings);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RegisterOutput>(<any>null);
    }
}

export class ConfigurationServiceProxy extends AbpServiceBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(instance:AxiosInstance) {
        super();
        this.instance = instance;
        this.baseUrl = ""
    }

    /**
     * @param input (optional) 
     * @return Success
     */
    changeUiTheme(input: ChangeUiThemeInput | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/Configuration/ChangeUiTheme";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processChangeUiTheme(_response));
        });
    }

    protected processChangeUiTheme(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class CustomerServiceProxy extends AbpServiceBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(instance:AxiosInstance) {
        super();
        this.instance = instance;
        this.baseUrl = ""
    }

    /**
     * @param keyword (optional) 
     * @param keywordsDict (optional) 
     * @param sorting (optional) 
     * @param skipCount (optional) 
     * @param maxResultCount (optional) 
     * @return Success
     */
    getAll(keyword: string | null | undefined, keywordsDict: any | null | undefined, sorting: string | null | undefined, skipCount: number | null | undefined, maxResultCount: number | null | undefined): Promise<PagedResultDtoOfCreateOrEditCustomerDto> {
        let url_ = this.baseUrl + "/api/services/app/Customer/GetAll?";
        
        if (keyword)
            url_ += "Keyword=" + encodeURIComponent("" + keyword) + "&"; 
        
        if (keywordsDict)
            url_ += "KeywordsDict=" + encodeURIComponent("" + keywordsDict) + "&"; 
        
        if (sorting)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        
        if (skipCount)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        
        if (maxResultCount)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetAll(_response));
        });
    }

    protected processGetAll(response: AxiosResponse): Promise<PagedResultDtoOfCreateOrEditCustomerDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PagedResultDtoOfCreateOrEditCustomerDto.fromJS(resultData200, _mappings);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PagedResultDtoOfCreateOrEditCustomerDto>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    get(id: number | null | undefined): Promise<CreateOrEditCustomerDto> {
        let url_ = this.baseUrl + "/api/services/app/Customer/Get?";
        
        if (id)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGet(_response));
        });
    }

    protected processGet(response: AxiosResponse): Promise<CreateOrEditCustomerDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CreateOrEditCustomerDto.fromJS(resultData200, _mappings);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CreateOrEditCustomerDto>(<any>null);
    }

    /**
     * @param input (optional) 
     * @return Success
     */
    create(input: CreateOrEditCustomerDto | null | undefined): Promise<CreateOrEditCustomerDto> {
        let url_ = this.baseUrl + "/api/services/app/Customer/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCreate(_response));
        });
    }

    protected processCreate(response: AxiosResponse): Promise<CreateOrEditCustomerDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CreateOrEditCustomerDto.fromJS(resultData200, _mappings);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CreateOrEditCustomerDto>(<any>null);
    }

    /**
     * @param input (optional) 
     * @return Success
     */
    update(input: CreateOrEditCustomerDto | null | undefined): Promise<CreateOrEditCustomerDto> {
        let url_ = this.baseUrl + "/api/services/app/Customer/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpdate(_response));
        });
    }

    protected processUpdate(response: AxiosResponse): Promise<CreateOrEditCustomerDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CreateOrEditCustomerDto.fromJS(resultData200, _mappings);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CreateOrEditCustomerDto>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    delete(id: number | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/Customer/Delete?";
        
        if (id)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete(_response));
        });
    }

    protected processDelete(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class CustPOServiceProxy extends AbpServiceBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(instance:AxiosInstance) {
        super();
        this.instance = instance;
        this.baseUrl = ""
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    get(id: number | null | undefined): Promise<CustPODto> {
        let url_ = this.baseUrl + "/api/services/app/CustPO/Get?";
        
        if (id)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGet(_response));
        });
    }

    protected processGet(response: AxiosResponse): Promise<CustPODto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CustPODto.fromJS(resultData200, _mappings);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CustPODto>(<any>null);
    }

    /**
     * @param keyword (optional) 
     * @param keywordsDict (optional) 
     * @param sorting (optional) 
     * @param skipCount (optional) 
     * @param maxResultCount (optional) 
     * @return Success
     */
    getAll(keyword: string | null | undefined, keywordsDict: any | null | undefined, sorting: string | null | undefined, skipCount: number | null | undefined, maxResultCount: number | null | undefined): Promise<PagedResultDtoOfCustPODto> {
        let url_ = this.baseUrl + "/api/services/app/CustPO/GetAll?";
        
        if (keyword)
            url_ += "Keyword=" + encodeURIComponent("" + keyword) + "&"; 
        
        if (keywordsDict)
            url_ += "KeywordsDict=" + encodeURIComponent("" + keywordsDict) + "&"; 
        
        if (sorting)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        
        if (skipCount)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        
        if (maxResultCount)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetAll(_response));
        });
    }

    protected processGetAll(response: AxiosResponse): Promise<PagedResultDtoOfCustPODto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PagedResultDtoOfCustPODto.fromJS(resultData200, _mappings);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PagedResultDtoOfCustPODto>(<any>null);
    }

    /**
     * @param input (optional) 
     * @return Success
     */
    create(input: CustPODto | null | undefined): Promise<CustPODto> {
        let url_ = this.baseUrl + "/api/services/app/CustPO/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCreate(_response));
        });
    }

    protected processCreate(response: AxiosResponse): Promise<CustPODto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CustPODto.fromJS(resultData200, _mappings);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CustPODto>(<any>null);
    }

    /**
     * @param input (optional) 
     * @return Success
     */
    update(input: CustPODto | null | undefined): Promise<CustPODto> {
        let url_ = this.baseUrl + "/api/services/app/CustPO/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpdate(_response));
        });
    }

    protected processUpdate(response: AxiosResponse): Promise<CustPODto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CustPODto.fromJS(resultData200, _mappings);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CustPODto>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    delete(id: number | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/CustPO/Delete?";
        
        if (id)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete(_response));
        });
    }

    protected processDelete(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class OrderServiceProxy extends AbpServiceBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(instance:AxiosInstance) {
        super();
        this.instance = instance;
        this.baseUrl = ""
    }

    /**
     * @param input (optional) 
     * @return Success
     */
    cancelOrder(input: EntityDtoOfInt64 | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/Order/CancelOrderAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCancelOrder(_response));
        });
    }

    protected processCancelOrder(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param input (optional) 
     * @return Success
     */
    createOrUpdate(input: OrderDto | null | undefined): Promise<number> {
        let url_ = this.baseUrl + "/api/services/app/Order/CreateOrUpdateAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCreateOrUpdate(_response));
        });
    }

    protected processCreateOrUpdate(response: AxiosResponse): Promise<number> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<number>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    getDetail(id: number | null | undefined): Promise<OrderDto> {
        let url_ = this.baseUrl + "/api/services/app/Order/GetDetailAsync?";
        
        if (id)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetDetail(_response));
        });
    }

    protected processGetDetail(response: AxiosResponse): Promise<OrderDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = OrderDto.fromJS(resultData200, _mappings);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<OrderDto>(<any>null);
    }

    /**
     * @param name (optional) 
     * @param custName (optional) 
     * @param pO (optional) 
     * @param financialStatusList (optional) 
     * @param skipCount (optional) 
     * @param maxResultCount (optional) 
     * @param sorting (optional) 
     * @return Success
     */
    getList(name: string | null | undefined, custName: string | null | undefined, pO: string | null | undefined, financialStatusList: number[] | null | undefined, skipCount: number | null | undefined, maxResultCount: number | null | undefined, sorting: string | null | undefined): Promise<ListResultDtoOfOrderDto> {
        let url_ = this.baseUrl + "/api/services/app/Order/GetListAsync?";
        
        if (name)
            url_ += "Name=" + encodeURIComponent("" + name) + "&"; 
        
        if (custName)
            url_ += "CustName=" + encodeURIComponent("" + custName) + "&"; 
        
        if (pO)
            url_ += "PO=" + encodeURIComponent("" + pO) + "&"; 
        
        if (financialStatusList)
            financialStatusList && financialStatusList.forEach(item => { url_ += "FinancialStatusList=" + encodeURIComponent("" + item) + "&"; });
        
        if (skipCount)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        
        if (maxResultCount)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        
        if (sorting)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetList(_response));
        });
    }

    protected processGetList(response: AxiosResponse): Promise<ListResultDtoOfOrderDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ListResultDtoOfOrderDto.fromJS(resultData200, _mappings);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ListResultDtoOfOrderDto>(<any>null);
    }
}

export class RoleServiceProxy extends AbpServiceBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(instance:AxiosInstance) {
        super();
        this.instance = instance;
        this.baseUrl = ""
    }

    /**
     * @param input (optional) 
     * @return Success
     */
    create(input: CreateRoleDto | null | undefined): Promise<RoleDto> {
        let url_ = this.baseUrl + "/api/services/app/Role/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCreate(_response));
        });
    }

    protected processCreate(response: AxiosResponse): Promise<RoleDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoleDto.fromJS(resultData200, _mappings);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoleDto>(<any>null);
    }

    /**
     * @param permission (optional) 
     * @return Success
     */
    getRoles(permission: string | null | undefined): Promise<ListResultDtoOfRoleListDto> {
        let url_ = this.baseUrl + "/api/services/app/Role/GetRolesAsync?";
        
        if (permission)
            url_ += "Permission=" + encodeURIComponent("" + permission) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetRoles(_response));
        });
    }

    protected processGetRoles(response: AxiosResponse): Promise<ListResultDtoOfRoleListDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ListResultDtoOfRoleListDto.fromJS(resultData200, _mappings);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ListResultDtoOfRoleListDto>(<any>null);
    }

    /**
     * @param input (optional) 
     * @return Success
     */
    update(input: RoleDto | null | undefined): Promise<RoleDto> {
        let url_ = this.baseUrl + "/api/services/app/Role/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpdate(_response));
        });
    }

    protected processUpdate(response: AxiosResponse): Promise<RoleDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoleDto.fromJS(resultData200, _mappings);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoleDto>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    delete(id: number | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/Role/Delete?";
        
        if (id)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete(_response));
        });
    }

    protected processDelete(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    getAllPermissions(): Promise<ListResultDtoOfPermissionDto> {
        let url_ = this.baseUrl + "/api/services/app/Role/GetAllPermissions";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetAllPermissions(_response));
        });
    }

    protected processGetAllPermissions(response: AxiosResponse): Promise<ListResultDtoOfPermissionDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ListResultDtoOfPermissionDto.fromJS(resultData200, _mappings);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ListResultDtoOfPermissionDto>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    getRoleForEdit(id: number | null | undefined): Promise<GetRoleForEditOutput> {
        let url_ = this.baseUrl + "/api/services/app/Role/GetRoleForEdit?";
        
        if (id)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetRoleForEdit(_response));
        });
    }

    protected processGetRoleForEdit(response: AxiosResponse): Promise<GetRoleForEditOutput> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = GetRoleForEditOutput.fromJS(resultData200, _mappings);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetRoleForEditOutput>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    get(id: number | null | undefined): Promise<RoleDto> {
        let url_ = this.baseUrl + "/api/services/app/Role/Get?";
        
        if (id)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGet(_response));
        });
    }

    protected processGet(response: AxiosResponse): Promise<RoleDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoleDto.fromJS(resultData200, _mappings);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoleDto>(<any>null);
    }

    /**
     * @param keyword (optional) 
     * @param skipCount (optional) 
     * @param maxResultCount (optional) 
     * @return Success
     */
    getAll(keyword: string | null | undefined, skipCount: number | null | undefined, maxResultCount: number | null | undefined): Promise<PagedResultDtoOfRoleDto> {
        let url_ = this.baseUrl + "/api/services/app/Role/GetAll?";
        
        if (keyword)
            url_ += "Keyword=" + encodeURIComponent("" + keyword) + "&"; 
        
        if (skipCount)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        
        if (maxResultCount)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetAll(_response));
        });
    }

    protected processGetAll(response: AxiosResponse): Promise<PagedResultDtoOfRoleDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PagedResultDtoOfRoleDto.fromJS(resultData200, _mappings);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PagedResultDtoOfRoleDto>(<any>null);
    }
}

export class SessionServiceProxy extends AbpServiceBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(instance:AxiosInstance) {
        super();
        this.instance = instance;
        this.baseUrl = ""
    }

    /**
     * @return Success
     */
    getCurrentLoginInformations(): Promise<GetCurrentLoginInformationsOutput> {
        let url_ = this.baseUrl + "/api/services/app/Session/GetCurrentLoginInformations";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetCurrentLoginInformations(_response));
        });
    }

    protected processGetCurrentLoginInformations(response: AxiosResponse): Promise<GetCurrentLoginInformationsOutput> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = GetCurrentLoginInformationsOutput.fromJS(resultData200, _mappings);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetCurrentLoginInformationsOutput>(<any>null);
    }
}

export class TenantServiceProxy extends AbpServiceBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(instance:AxiosInstance) {
        super();
        this.instance = instance;
        this.baseUrl = ""
    }

    /**
     * @param input (optional) 
     * @return Success
     */
    create(input: CreateTenantDto | null | undefined): Promise<TenantDto> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCreate(_response));
        });
    }

    protected processCreate(response: AxiosResponse): Promise<TenantDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = TenantDto.fromJS(resultData200, _mappings);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TenantDto>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    delete(id: number | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/Delete?";
        
        if (id)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete(_response));
        });
    }

    protected processDelete(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    get(id: number | null | undefined): Promise<TenantDto> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/Get?";
        
        if (id)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGet(_response));
        });
    }

    protected processGet(response: AxiosResponse): Promise<TenantDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = TenantDto.fromJS(resultData200, _mappings);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TenantDto>(<any>null);
    }

    /**
     * @param keyword (optional) 
     * @param isActive (optional) 
     * @param skipCount (optional) 
     * @param maxResultCount (optional) 
     * @return Success
     */
    getAll(keyword: string | null | undefined, isActive: boolean | null | undefined, skipCount: number | null | undefined, maxResultCount: number | null | undefined): Promise<PagedResultDtoOfTenantDto> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/GetAll?";
        
        if (keyword)
            url_ += "Keyword=" + encodeURIComponent("" + keyword) + "&"; 
        
        if (isActive)
            url_ += "IsActive=" + encodeURIComponent("" + isActive) + "&"; 
        
        if (skipCount)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        
        if (maxResultCount)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetAll(_response));
        });
    }

    protected processGetAll(response: AxiosResponse): Promise<PagedResultDtoOfTenantDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PagedResultDtoOfTenantDto.fromJS(resultData200, _mappings);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PagedResultDtoOfTenantDto>(<any>null);
    }

    /**
     * @param input (optional) 
     * @return Success
     */
    update(input: TenantDto | null | undefined): Promise<TenantDto> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpdate(_response));
        });
    }

    protected processUpdate(response: AxiosResponse): Promise<TenantDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = TenantDto.fromJS(resultData200, _mappings);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TenantDto>(<any>null);
    }
}

export class TokenAuthServiceProxy extends AbpServiceBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(instance:AxiosInstance) {
        super();
        this.instance = instance;
        this.baseUrl = ""
    }

    /**
     * @param model (optional) 
     * @return Success
     */
    authenticate(model: AuthenticateModel | null | undefined): Promise<AuthenticateResultModel> {
        let url_ = this.baseUrl + "/api/TokenAuth/Authenticate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processAuthenticate(_response));
        });
    }

    protected processAuthenticate(response: AxiosResponse): Promise<AuthenticateResultModel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = AuthenticateResultModel.fromJS(resultData200, _mappings);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AuthenticateResultModel>(<any>null);
    }

    /**
     * @return Success
     */
    getExternalAuthenticationProviders(): Promise<ExternalLoginProviderInfoModel[]> {
        let url_ = this.baseUrl + "/api/TokenAuth/GetExternalAuthenticationProviders";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetExternalAuthenticationProviders(_response));
        });
    }

    protected processGetExternalAuthenticationProviders(response: AxiosResponse): Promise<ExternalLoginProviderInfoModel[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ExternalLoginProviderInfoModel.fromJS(item, _mappings));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ExternalLoginProviderInfoModel[]>(<any>null);
    }

    /**
     * @param model (optional) 
     * @return Success
     */
    externalAuthenticate(model: ExternalAuthenticateModel | null | undefined): Promise<ExternalAuthenticateResultModel> {
        let url_ = this.baseUrl + "/api/TokenAuth/ExternalAuthenticate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExternalAuthenticate(_response));
        });
    }

    protected processExternalAuthenticate(response: AxiosResponse): Promise<ExternalAuthenticateResultModel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ExternalAuthenticateResultModel.fromJS(resultData200, _mappings);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ExternalAuthenticateResultModel>(<any>null);
    }
}

export class UserServiceProxy extends AbpServiceBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(instance:AxiosInstance) {
        super();
        this.instance = instance;
        this.baseUrl = ""
    }

    /**
     * @param input (optional) 
     * @return Success
     */
    create(input: CreateUserDto | null | undefined): Promise<UserDto> {
        let url_ = this.baseUrl + "/api/services/app/User/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCreate(_response));
        });
    }

    protected processCreate(response: AxiosResponse): Promise<UserDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = UserDto.fromJS(resultData200, _mappings);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UserDto>(<any>null);
    }

    /**
     * @param input (optional) 
     * @return Success
     */
    update(input: UserDto | null | undefined): Promise<UserDto> {
        let url_ = this.baseUrl + "/api/services/app/User/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpdate(_response));
        });
    }

    protected processUpdate(response: AxiosResponse): Promise<UserDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = UserDto.fromJS(resultData200, _mappings);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UserDto>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    delete(id: number | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/User/Delete?";
        
        if (id)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete(_response));
        });
    }

    protected processDelete(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    getRoles(): Promise<ListResultDtoOfRoleDto> {
        let url_ = this.baseUrl + "/api/services/app/User/GetRoles";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetRoles(_response));
        });
    }

    protected processGetRoles(response: AxiosResponse): Promise<ListResultDtoOfRoleDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ListResultDtoOfRoleDto.fromJS(resultData200, _mappings);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ListResultDtoOfRoleDto>(<any>null);
    }

    /**
     * @param input (optional) 
     * @return Success
     */
    changeLanguage(input: ChangeUserLanguageDto | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/User/ChangeLanguage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processChangeLanguage(_response));
        });
    }

    protected processChangeLanguage(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param input (optional) 
     * @return Success
     */
    changePassword(input: ChangePasswordDto | null | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/api/services/app/User/ChangePassword";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processChangePassword(_response));
        });
    }

    protected processChangePassword(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }

    /**
     * @param input (optional) 
     * @return Success
     */
    resetPassword(input: ResetPasswordDto | null | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/api/services/app/User/ResetPassword";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processResetPassword(_response));
        });
    }

    protected processResetPassword(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    get(id: number | null | undefined): Promise<UserDto> {
        let url_ = this.baseUrl + "/api/services/app/User/Get?";
        
        if (id)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGet(_response));
        });
    }

    protected processGet(response: AxiosResponse): Promise<UserDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = UserDto.fromJS(resultData200, _mappings);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UserDto>(<any>null);
    }

    /**
     * @param keyword (optional) 
     * @param isActive (optional) 
     * @param skipCount (optional) 
     * @param maxResultCount (optional) 
     * @return Success
     */
    getAll(keyword: string | null | undefined, isActive: boolean | null | undefined, skipCount: number | null | undefined, maxResultCount: number | null | undefined): Promise<PagedResultDtoOfUserDto> {
        let url_ = this.baseUrl + "/api/services/app/User/GetAll?";
        
        if (keyword)
            url_ += "Keyword=" + encodeURIComponent("" + keyword) + "&"; 
        
        if (isActive)
            url_ += "IsActive=" + encodeURIComponent("" + isActive) + "&"; 
        
        if (skipCount)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        
        if (maxResultCount)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetAll(_response));
        });
    }

    protected processGetAll(response: AxiosResponse): Promise<PagedResultDtoOfUserDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PagedResultDtoOfUserDto.fromJS(resultData200, _mappings);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PagedResultDtoOfUserDto>(<any>null);
    }
}

export class IsTenantAvailableInput {
    tenancyName!: string;

    init(data?: any, _mappings?: any) {
        if (data) {
            this.tenancyName = data["tenancyName"] !== undefined ? data["tenancyName"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): IsTenantAvailableInput {
        data = typeof data === 'object' ? data : {};
        return createInstance<IsTenantAvailableInput>(data, _mappings, IsTenantAvailableInput);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName !== undefined ? this.tenancyName : <any>null;
        return data; 
    }
}

export class IsTenantAvailableOutput {
    state!: TenantAvailabilityState | null;
    tenantId!: number | null;

    init(data?: any, _mappings?: any) {
        if (data) {
            this.state = data["state"] !== undefined ? data["state"] : <any>null;
            this.tenantId = data["tenantId"] !== undefined ? data["tenantId"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): IsTenantAvailableOutput {
        data = typeof data === 'object' ? data : {};
        return createInstance<IsTenantAvailableOutput>(data, _mappings, IsTenantAvailableOutput);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["state"] = this.state !== undefined ? this.state : <any>null;
        data["tenantId"] = this.tenantId !== undefined ? this.tenantId : <any>null;
        return data; 
    }
}

export enum TenantAvailabilityState {
    Available = 1,
    InActive = 2,
    NotFound = 3,
}

export class RegisterInput {
    name!: string;
    surname!: string;
    userName!: string;
    emailAddress!: string;
    password!: string;
    captchaResponse!: string | null;

    init(data?: any, _mappings?: any) {
        if (data) {
            this.name = data["name"] !== undefined ? data["name"] : <any>null;
            this.surname = data["surname"] !== undefined ? data["surname"] : <any>null;
            this.userName = data["userName"] !== undefined ? data["userName"] : <any>null;
            this.emailAddress = data["emailAddress"] !== undefined ? data["emailAddress"] : <any>null;
            this.password = data["password"] !== undefined ? data["password"] : <any>null;
            this.captchaResponse = data["captchaResponse"] !== undefined ? data["captchaResponse"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): RegisterInput {
        data = typeof data === 'object' ? data : {};
        return createInstance<RegisterInput>(data, _mappings, RegisterInput);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["surname"] = this.surname !== undefined ? this.surname : <any>null;
        data["userName"] = this.userName !== undefined ? this.userName : <any>null;
        data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : <any>null;
        data["password"] = this.password !== undefined ? this.password : <any>null;
        data["captchaResponse"] = this.captchaResponse !== undefined ? this.captchaResponse : <any>null;
        return data; 
    }
}

export class RegisterOutput {
    canLogin!: boolean | null;

    init(data?: any, _mappings?: any) {
        if (data) {
            this.canLogin = data["canLogin"] !== undefined ? data["canLogin"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): RegisterOutput {
        data = typeof data === 'object' ? data : {};
        return createInstance<RegisterOutput>(data, _mappings, RegisterOutput);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["canLogin"] = this.canLogin !== undefined ? this.canLogin : <any>null;
        return data; 
    }
}

export class ChangeUiThemeInput {
    theme!: string;

    init(data?: any, _mappings?: any) {
        if (data) {
            this.theme = data["theme"] !== undefined ? data["theme"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): ChangeUiThemeInput {
        data = typeof data === 'object' ? data : {};
        return createInstance<ChangeUiThemeInput>(data, _mappings, ChangeUiThemeInput);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["theme"] = this.theme !== undefined ? this.theme : <any>null;
        return data; 
    }
}

export class PagedResultDtoOfCreateOrEditCustomerDto {
    totalCount!: number | null;
    items!: CreateOrEditCustomerDto[] | null;

    init(data?: any, _mappings?: any) {
        if (data) {
            this.totalCount = data["totalCount"] !== undefined ? data["totalCount"] : <any>null;
            if (Array.isArray(data["items"])) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(CreateOrEditCustomerDto.fromJS(item, _mappings));
            }
        }
    }

    static fromJS(data: any, _mappings?: any): PagedResultDtoOfCreateOrEditCustomerDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<PagedResultDtoOfCreateOrEditCustomerDto>(data, _mappings, PagedResultDtoOfCreateOrEditCustomerDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : <any>null;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export class CreateOrEditCustomerDto {
    customerName!: string | null;
    id!: number | null;

    init(data?: any, _mappings?: any) {
        if (data) {
            this.customerName = data["customerName"] !== undefined ? data["customerName"] : <any>null;
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): CreateOrEditCustomerDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<CreateOrEditCustomerDto>(data, _mappings, CreateOrEditCustomerDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["customerName"] = this.customerName !== undefined ? this.customerName : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export class CustPODto {
    poNumber!: string | null;
    poAmount!: number | null;
    poDescription!: string | null;
    id!: number | null;

    init(data?: any, _mappings?: any) {
        if (data) {
            this.poNumber = data["poNumber"] !== undefined ? data["poNumber"] : <any>null;
            this.poAmount = data["poAmount"] !== undefined ? data["poAmount"] : <any>null;
            this.poDescription = data["poDescription"] !== undefined ? data["poDescription"] : <any>null;
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): CustPODto {
        data = typeof data === 'object' ? data : {};
        return createInstance<CustPODto>(data, _mappings, CustPODto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["poNumber"] = this.poNumber !== undefined ? this.poNumber : <any>null;
        data["poAmount"] = this.poAmount !== undefined ? this.poAmount : <any>null;
        data["poDescription"] = this.poDescription !== undefined ? this.poDescription : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export class PagedResultDtoOfCustPODto {
    totalCount!: number | null;
    items!: CustPODto[] | null;

    init(data?: any, _mappings?: any) {
        if (data) {
            this.totalCount = data["totalCount"] !== undefined ? data["totalCount"] : <any>null;
            if (Array.isArray(data["items"])) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(CustPODto.fromJS(item, _mappings));
            }
        }
    }

    static fromJS(data: any, _mappings?: any): PagedResultDtoOfCustPODto {
        data = typeof data === 'object' ? data : {};
        return createInstance<PagedResultDtoOfCustPODto>(data, _mappings, PagedResultDtoOfCustPODto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : <any>null;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export class EntityDtoOfInt64 {
    id!: number | null;

    init(data?: any, _mappings?: any) {
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): EntityDtoOfInt64 {
        data = typeof data === 'object' ? data : {};
        return createInstance<EntityDtoOfInt64>(data, _mappings, EntityDtoOfInt64);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export class OrderDto {
    orderName!: string | null;
    customerName!: string | null;
    customerId!: number | null;
    orderFinancialStatus!: OrderFinancialStatus | null;
    poId!: number | null;
    poNumber!: number | null;
    courierNumber!: string | null;
    billingDate!: Date | null;
    description!: string | null;
    workloadTotal!: number | null;
    taxRate!: number | null;
    discont!: number | null;
    unitPrice!: number | null;
    id!: number | null;

    init(data?: any, _mappings?: any) {
        if (data) {
            this.orderName = data["orderName"] !== undefined ? data["orderName"] : <any>null;
            this.customerName = data["customerName"] !== undefined ? data["customerName"] : <any>null;
            this.customerId = data["customerId"] !== undefined ? data["customerId"] : <any>null;
            this.orderFinancialStatus = data["orderFinancialStatus"] !== undefined ? data["orderFinancialStatus"] : <any>null;
            this.poId = data["poId"] !== undefined ? data["poId"] : <any>null;
            this.poNumber = data["poNumber"] !== undefined ? data["poNumber"] : <any>null;
            this.courierNumber = data["courierNumber"] !== undefined ? data["courierNumber"] : <any>null;
            this.billingDate = data["billingDate"] ? new Date(data["billingDate"].toString()) : <any>null;
            this.description = data["description"] !== undefined ? data["description"] : <any>null;
            this.workloadTotal = data["workloadTotal"] !== undefined ? data["workloadTotal"] : <any>null;
            this.taxRate = data["taxRate"] !== undefined ? data["taxRate"] : <any>null;
            this.discont = data["discont"] !== undefined ? data["discont"] : <any>null;
            this.unitPrice = data["unitPrice"] !== undefined ? data["unitPrice"] : <any>null;
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): OrderDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<OrderDto>(data, _mappings, OrderDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderName"] = this.orderName !== undefined ? this.orderName : <any>null;
        data["customerName"] = this.customerName !== undefined ? this.customerName : <any>null;
        data["customerId"] = this.customerId !== undefined ? this.customerId : <any>null;
        data["orderFinancialStatus"] = this.orderFinancialStatus !== undefined ? this.orderFinancialStatus : <any>null;
        data["poId"] = this.poId !== undefined ? this.poId : <any>null;
        data["poNumber"] = this.poNumber !== undefined ? this.poNumber : <any>null;
        data["courierNumber"] = this.courierNumber !== undefined ? this.courierNumber : <any>null;
        data["billingDate"] = this.billingDate ? this.billingDate.toISOString() : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["workloadTotal"] = this.workloadTotal !== undefined ? this.workloadTotal : <any>null;
        data["taxRate"] = this.taxRate !== undefined ? this.taxRate : <any>null;
        data["discont"] = this.discont !== undefined ? this.discont : <any>null;
        data["unitPrice"] = this.unitPrice !== undefined ? this.unitPrice : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export enum OrderFinancialStatus {
    Planed = 0,
    Ordered = 1,
    Invoiced = 2,
    Recived = 3,
    Completed = 4,
    Canceled = 5,
}

export class ListResultDtoOfOrderDto {
    items!: OrderDto[] | null;

    init(data?: any, _mappings?: any) {
        if (data) {
            if (Array.isArray(data["items"])) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(OrderDto.fromJS(item, _mappings));
            }
        }
    }

    static fromJS(data: any, _mappings?: any): ListResultDtoOfOrderDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<ListResultDtoOfOrderDto>(data, _mappings, ListResultDtoOfOrderDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export class CreateRoleDto {
    name!: string;
    displayName!: string;
    normalizedName!: string | null;
    description!: string | null;
    grantedPermissions!: string[] | null;

    init(data?: any, _mappings?: any) {
        if (data) {
            this.name = data["name"] !== undefined ? data["name"] : <any>null;
            this.displayName = data["displayName"] !== undefined ? data["displayName"] : <any>null;
            this.normalizedName = data["normalizedName"] !== undefined ? data["normalizedName"] : <any>null;
            this.description = data["description"] !== undefined ? data["description"] : <any>null;
            if (Array.isArray(data["grantedPermissions"])) {
                this.grantedPermissions = [] as any;
                for (let item of data["grantedPermissions"])
                    this.grantedPermissions!.push(item);
            }
        }
    }

    static fromJS(data: any, _mappings?: any): CreateRoleDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<CreateRoleDto>(data, _mappings, CreateRoleDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["displayName"] = this.displayName !== undefined ? this.displayName : <any>null;
        data["normalizedName"] = this.normalizedName !== undefined ? this.normalizedName : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        if (Array.isArray(this.grantedPermissions)) {
            data["grantedPermissions"] = [];
            for (let item of this.grantedPermissions)
                data["grantedPermissions"].push(item);
        }
        return data; 
    }
}

export class RoleDto {
    name!: string;
    displayName!: string;
    normalizedName!: string | null;
    description!: string | null;
    grantedPermissions!: string[] | null;
    id!: number | null;

    init(data?: any, _mappings?: any) {
        if (data) {
            this.name = data["name"] !== undefined ? data["name"] : <any>null;
            this.displayName = data["displayName"] !== undefined ? data["displayName"] : <any>null;
            this.normalizedName = data["normalizedName"] !== undefined ? data["normalizedName"] : <any>null;
            this.description = data["description"] !== undefined ? data["description"] : <any>null;
            if (Array.isArray(data["grantedPermissions"])) {
                this.grantedPermissions = [] as any;
                for (let item of data["grantedPermissions"])
                    this.grantedPermissions!.push(item);
            }
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): RoleDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<RoleDto>(data, _mappings, RoleDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["displayName"] = this.displayName !== undefined ? this.displayName : <any>null;
        data["normalizedName"] = this.normalizedName !== undefined ? this.normalizedName : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        if (Array.isArray(this.grantedPermissions)) {
            data["grantedPermissions"] = [];
            for (let item of this.grantedPermissions)
                data["grantedPermissions"].push(item);
        }
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export class ListResultDtoOfRoleListDto {
    items!: RoleListDto[] | null;

    init(data?: any, _mappings?: any) {
        if (data) {
            if (Array.isArray(data["items"])) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(RoleListDto.fromJS(item, _mappings));
            }
        }
    }

    static fromJS(data: any, _mappings?: any): ListResultDtoOfRoleListDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<ListResultDtoOfRoleListDto>(data, _mappings, ListResultDtoOfRoleListDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export class RoleListDto {
    name!: string | null;
    displayName!: string | null;
    isStatic!: boolean | null;
    isDefault!: boolean | null;
    creationTime!: Date | null;
    id!: number | null;

    init(data?: any, _mappings?: any) {
        if (data) {
            this.name = data["name"] !== undefined ? data["name"] : <any>null;
            this.displayName = data["displayName"] !== undefined ? data["displayName"] : <any>null;
            this.isStatic = data["isStatic"] !== undefined ? data["isStatic"] : <any>null;
            this.isDefault = data["isDefault"] !== undefined ? data["isDefault"] : <any>null;
            this.creationTime = data["creationTime"] ? new Date(data["creationTime"].toString()) : <any>null;
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): RoleListDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<RoleListDto>(data, _mappings, RoleListDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["displayName"] = this.displayName !== undefined ? this.displayName : <any>null;
        data["isStatic"] = this.isStatic !== undefined ? this.isStatic : <any>null;
        data["isDefault"] = this.isDefault !== undefined ? this.isDefault : <any>null;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export class ListResultDtoOfPermissionDto {
    items!: PermissionDto[] | null;

    init(data?: any, _mappings?: any) {
        if (data) {
            if (Array.isArray(data["items"])) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(PermissionDto.fromJS(item, _mappings));
            }
        }
    }

    static fromJS(data: any, _mappings?: any): ListResultDtoOfPermissionDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<ListResultDtoOfPermissionDto>(data, _mappings, ListResultDtoOfPermissionDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export class PermissionDto {
    name!: string | null;
    displayName!: string | null;
    description!: string | null;
    id!: number | null;

    init(data?: any, _mappings?: any) {
        if (data) {
            this.name = data["name"] !== undefined ? data["name"] : <any>null;
            this.displayName = data["displayName"] !== undefined ? data["displayName"] : <any>null;
            this.description = data["description"] !== undefined ? data["description"] : <any>null;
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): PermissionDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<PermissionDto>(data, _mappings, PermissionDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["displayName"] = this.displayName !== undefined ? this.displayName : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export class GetRoleForEditOutput {
    role!: RoleEditDto | null;
    permissions!: FlatPermissionDto[] | null;
    grantedPermissionNames!: string[] | null;

    init(data?: any, _mappings?: any) {
        if (data) {
            this.role = data["role"] ? RoleEditDto.fromJS(data["role"], _mappings) : <any>null;
            if (Array.isArray(data["permissions"])) {
                this.permissions = [] as any;
                for (let item of data["permissions"])
                    this.permissions!.push(FlatPermissionDto.fromJS(item, _mappings));
            }
            if (Array.isArray(data["grantedPermissionNames"])) {
                this.grantedPermissionNames = [] as any;
                for (let item of data["grantedPermissionNames"])
                    this.grantedPermissionNames!.push(item);
            }
        }
    }

    static fromJS(data: any, _mappings?: any): GetRoleForEditOutput {
        data = typeof data === 'object' ? data : {};
        return createInstance<GetRoleForEditOutput>(data, _mappings, GetRoleForEditOutput);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["role"] = this.role ? this.role.toJSON() : <any>null;
        if (Array.isArray(this.permissions)) {
            data["permissions"] = [];
            for (let item of this.permissions)
                data["permissions"].push(item.toJSON());
        }
        if (Array.isArray(this.grantedPermissionNames)) {
            data["grantedPermissionNames"] = [];
            for (let item of this.grantedPermissionNames)
                data["grantedPermissionNames"].push(item);
        }
        return data; 
    }
}

export class RoleEditDto {
    name!: string;
    displayName!: string;
    description!: string | null;
    isStatic!: boolean | null;
    id!: number | null;

    init(data?: any, _mappings?: any) {
        if (data) {
            this.name = data["name"] !== undefined ? data["name"] : <any>null;
            this.displayName = data["displayName"] !== undefined ? data["displayName"] : <any>null;
            this.description = data["description"] !== undefined ? data["description"] : <any>null;
            this.isStatic = data["isStatic"] !== undefined ? data["isStatic"] : <any>null;
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): RoleEditDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<RoleEditDto>(data, _mappings, RoleEditDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["displayName"] = this.displayName !== undefined ? this.displayName : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["isStatic"] = this.isStatic !== undefined ? this.isStatic : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export class FlatPermissionDto {
    name!: string | null;
    displayName!: string | null;
    description!: string | null;

    init(data?: any, _mappings?: any) {
        if (data) {
            this.name = data["name"] !== undefined ? data["name"] : <any>null;
            this.displayName = data["displayName"] !== undefined ? data["displayName"] : <any>null;
            this.description = data["description"] !== undefined ? data["description"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): FlatPermissionDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<FlatPermissionDto>(data, _mappings, FlatPermissionDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["displayName"] = this.displayName !== undefined ? this.displayName : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        return data; 
    }
}

export class PagedResultDtoOfRoleDto {
    totalCount!: number | null;
    items!: RoleDto[] | null;

    init(data?: any, _mappings?: any) {
        if (data) {
            this.totalCount = data["totalCount"] !== undefined ? data["totalCount"] : <any>null;
            if (Array.isArray(data["items"])) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(RoleDto.fromJS(item, _mappings));
            }
        }
    }

    static fromJS(data: any, _mappings?: any): PagedResultDtoOfRoleDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<PagedResultDtoOfRoleDto>(data, _mappings, PagedResultDtoOfRoleDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : <any>null;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export class GetCurrentLoginInformationsOutput {
    application!: ApplicationInfoDto | null;
    user!: UserLoginInfoDto | null;
    tenant!: TenantLoginInfoDto | null;

    init(data?: any, _mappings?: any) {
        if (data) {
            this.application = data["application"] ? ApplicationInfoDto.fromJS(data["application"], _mappings) : <any>null;
            this.user = data["user"] ? UserLoginInfoDto.fromJS(data["user"], _mappings) : <any>null;
            this.tenant = data["tenant"] ? TenantLoginInfoDto.fromJS(data["tenant"], _mappings) : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): GetCurrentLoginInformationsOutput {
        data = typeof data === 'object' ? data : {};
        return createInstance<GetCurrentLoginInformationsOutput>(data, _mappings, GetCurrentLoginInformationsOutput);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["application"] = this.application ? this.application.toJSON() : <any>null;
        data["user"] = this.user ? this.user.toJSON() : <any>null;
        data["tenant"] = this.tenant ? this.tenant.toJSON() : <any>null;
        return data; 
    }
}

export class ApplicationInfoDto {
    version!: string | null;
    releaseDate!: Date | null;
    features!: { [key: string]: boolean; } | null;

    init(data?: any, _mappings?: any) {
        if (data) {
            this.version = data["version"] !== undefined ? data["version"] : <any>null;
            this.releaseDate = data["releaseDate"] ? new Date(data["releaseDate"].toString()) : <any>null;
            if (data["features"]) {
                this.features = {} as any;
                for (let key in data["features"]) {
                    if (data["features"].hasOwnProperty(key))
                        this.features![key] = data["features"][key];
                }
            }
        }
    }

    static fromJS(data: any, _mappings?: any): ApplicationInfoDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<ApplicationInfoDto>(data, _mappings, ApplicationInfoDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["version"] = this.version !== undefined ? this.version : <any>null;
        data["releaseDate"] = this.releaseDate ? this.releaseDate.toISOString() : <any>null;
        if (this.features) {
            data["features"] = {};
            for (let key in this.features) {
                if (this.features.hasOwnProperty(key))
                    data["features"][key] = this.features[key] !== undefined ? this.features[key] : <any>null;
            }
        }
        return data; 
    }
}

export class UserLoginInfoDto {
    name!: string | null;
    surname!: string | null;
    userName!: string | null;
    emailAddress!: string | null;
    id!: number | null;

    init(data?: any, _mappings?: any) {
        if (data) {
            this.name = data["name"] !== undefined ? data["name"] : <any>null;
            this.surname = data["surname"] !== undefined ? data["surname"] : <any>null;
            this.userName = data["userName"] !== undefined ? data["userName"] : <any>null;
            this.emailAddress = data["emailAddress"] !== undefined ? data["emailAddress"] : <any>null;
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): UserLoginInfoDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<UserLoginInfoDto>(data, _mappings, UserLoginInfoDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["surname"] = this.surname !== undefined ? this.surname : <any>null;
        data["userName"] = this.userName !== undefined ? this.userName : <any>null;
        data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export class TenantLoginInfoDto {
    tenancyName!: string | null;
    name!: string | null;
    id!: number | null;

    init(data?: any, _mappings?: any) {
        if (data) {
            this.tenancyName = data["tenancyName"] !== undefined ? data["tenancyName"] : <any>null;
            this.name = data["name"] !== undefined ? data["name"] : <any>null;
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): TenantLoginInfoDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<TenantLoginInfoDto>(data, _mappings, TenantLoginInfoDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName !== undefined ? this.tenancyName : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export class CreateTenantDto {
    tenancyName!: string;
    name!: string;
    adminEmailAddress!: string;
    connectionString!: string | null;
    isActive!: boolean | null;

    init(data?: any, _mappings?: any) {
        if (data) {
            this.tenancyName = data["tenancyName"] !== undefined ? data["tenancyName"] : <any>null;
            this.name = data["name"] !== undefined ? data["name"] : <any>null;
            this.adminEmailAddress = data["adminEmailAddress"] !== undefined ? data["adminEmailAddress"] : <any>null;
            this.connectionString = data["connectionString"] !== undefined ? data["connectionString"] : <any>null;
            this.isActive = data["isActive"] !== undefined ? data["isActive"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): CreateTenantDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<CreateTenantDto>(data, _mappings, CreateTenantDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName !== undefined ? this.tenancyName : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["adminEmailAddress"] = this.adminEmailAddress !== undefined ? this.adminEmailAddress : <any>null;
        data["connectionString"] = this.connectionString !== undefined ? this.connectionString : <any>null;
        data["isActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        return data; 
    }
}

export class TenantDto {
    tenancyName!: string;
    name!: string;
    isActive!: boolean | null;
    id!: number | null;

    init(data?: any, _mappings?: any) {
        if (data) {
            this.tenancyName = data["tenancyName"] !== undefined ? data["tenancyName"] : <any>null;
            this.name = data["name"] !== undefined ? data["name"] : <any>null;
            this.isActive = data["isActive"] !== undefined ? data["isActive"] : <any>null;
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): TenantDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<TenantDto>(data, _mappings, TenantDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName !== undefined ? this.tenancyName : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["isActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export class PagedResultDtoOfTenantDto {
    totalCount!: number | null;
    items!: TenantDto[] | null;

    init(data?: any, _mappings?: any) {
        if (data) {
            this.totalCount = data["totalCount"] !== undefined ? data["totalCount"] : <any>null;
            if (Array.isArray(data["items"])) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(TenantDto.fromJS(item, _mappings));
            }
        }
    }

    static fromJS(data: any, _mappings?: any): PagedResultDtoOfTenantDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<PagedResultDtoOfTenantDto>(data, _mappings, PagedResultDtoOfTenantDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : <any>null;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export class AuthenticateModel {
    userNameOrEmailAddress!: string;
    password!: string;
    rememberClient!: boolean | null;

    init(data?: any, _mappings?: any) {
        if (data) {
            this.userNameOrEmailAddress = data["userNameOrEmailAddress"] !== undefined ? data["userNameOrEmailAddress"] : <any>null;
            this.password = data["password"] !== undefined ? data["password"] : <any>null;
            this.rememberClient = data["rememberClient"] !== undefined ? data["rememberClient"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): AuthenticateModel {
        data = typeof data === 'object' ? data : {};
        return createInstance<AuthenticateModel>(data, _mappings, AuthenticateModel);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userNameOrEmailAddress"] = this.userNameOrEmailAddress !== undefined ? this.userNameOrEmailAddress : <any>null;
        data["password"] = this.password !== undefined ? this.password : <any>null;
        data["rememberClient"] = this.rememberClient !== undefined ? this.rememberClient : <any>null;
        return data; 
    }
}

export class AuthenticateResultModel {
    accessToken!: string | null;
    encryptedAccessToken!: string | null;
    expireInSeconds!: number | null;
    userId!: number | null;

    init(data?: any, _mappings?: any) {
        if (data) {
            this.accessToken = data["accessToken"] !== undefined ? data["accessToken"] : <any>null;
            this.encryptedAccessToken = data["encryptedAccessToken"] !== undefined ? data["encryptedAccessToken"] : <any>null;
            this.expireInSeconds = data["expireInSeconds"] !== undefined ? data["expireInSeconds"] : <any>null;
            this.userId = data["userId"] !== undefined ? data["userId"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): AuthenticateResultModel {
        data = typeof data === 'object' ? data : {};
        return createInstance<AuthenticateResultModel>(data, _mappings, AuthenticateResultModel);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accessToken"] = this.accessToken !== undefined ? this.accessToken : <any>null;
        data["encryptedAccessToken"] = this.encryptedAccessToken !== undefined ? this.encryptedAccessToken : <any>null;
        data["expireInSeconds"] = this.expireInSeconds !== undefined ? this.expireInSeconds : <any>null;
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        return data; 
    }
}

export class ExternalLoginProviderInfoModel {
    name!: string | null;
    clientId!: string | null;

    init(data?: any, _mappings?: any) {
        if (data) {
            this.name = data["name"] !== undefined ? data["name"] : <any>null;
            this.clientId = data["clientId"] !== undefined ? data["clientId"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): ExternalLoginProviderInfoModel {
        data = typeof data === 'object' ? data : {};
        return createInstance<ExternalLoginProviderInfoModel>(data, _mappings, ExternalLoginProviderInfoModel);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["clientId"] = this.clientId !== undefined ? this.clientId : <any>null;
        return data; 
    }
}

export class ExternalAuthenticateModel {
    authProvider!: string;
    providerKey!: string;
    providerAccessCode!: string;

    init(data?: any, _mappings?: any) {
        if (data) {
            this.authProvider = data["authProvider"] !== undefined ? data["authProvider"] : <any>null;
            this.providerKey = data["providerKey"] !== undefined ? data["providerKey"] : <any>null;
            this.providerAccessCode = data["providerAccessCode"] !== undefined ? data["providerAccessCode"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): ExternalAuthenticateModel {
        data = typeof data === 'object' ? data : {};
        return createInstance<ExternalAuthenticateModel>(data, _mappings, ExternalAuthenticateModel);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["authProvider"] = this.authProvider !== undefined ? this.authProvider : <any>null;
        data["providerKey"] = this.providerKey !== undefined ? this.providerKey : <any>null;
        data["providerAccessCode"] = this.providerAccessCode !== undefined ? this.providerAccessCode : <any>null;
        return data; 
    }
}

export class ExternalAuthenticateResultModel {
    accessToken!: string | null;
    encryptedAccessToken!: string | null;
    expireInSeconds!: number | null;
    waitingForActivation!: boolean | null;

    init(data?: any, _mappings?: any) {
        if (data) {
            this.accessToken = data["accessToken"] !== undefined ? data["accessToken"] : <any>null;
            this.encryptedAccessToken = data["encryptedAccessToken"] !== undefined ? data["encryptedAccessToken"] : <any>null;
            this.expireInSeconds = data["expireInSeconds"] !== undefined ? data["expireInSeconds"] : <any>null;
            this.waitingForActivation = data["waitingForActivation"] !== undefined ? data["waitingForActivation"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): ExternalAuthenticateResultModel {
        data = typeof data === 'object' ? data : {};
        return createInstance<ExternalAuthenticateResultModel>(data, _mappings, ExternalAuthenticateResultModel);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accessToken"] = this.accessToken !== undefined ? this.accessToken : <any>null;
        data["encryptedAccessToken"] = this.encryptedAccessToken !== undefined ? this.encryptedAccessToken : <any>null;
        data["expireInSeconds"] = this.expireInSeconds !== undefined ? this.expireInSeconds : <any>null;
        data["waitingForActivation"] = this.waitingForActivation !== undefined ? this.waitingForActivation : <any>null;
        return data; 
    }
}

export class CreateUserDto {
    userName!: string;
    name!: string;
    surname!: string;
    emailAddress!: string;
    isActive!: boolean | null;
    roleNames!: string[] | null;
    password!: string;

    init(data?: any, _mappings?: any) {
        if (data) {
            this.userName = data["userName"] !== undefined ? data["userName"] : <any>null;
            this.name = data["name"] !== undefined ? data["name"] : <any>null;
            this.surname = data["surname"] !== undefined ? data["surname"] : <any>null;
            this.emailAddress = data["emailAddress"] !== undefined ? data["emailAddress"] : <any>null;
            this.isActive = data["isActive"] !== undefined ? data["isActive"] : <any>null;
            if (Array.isArray(data["roleNames"])) {
                this.roleNames = [] as any;
                for (let item of data["roleNames"])
                    this.roleNames!.push(item);
            }
            this.password = data["password"] !== undefined ? data["password"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): CreateUserDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<CreateUserDto>(data, _mappings, CreateUserDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName !== undefined ? this.userName : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["surname"] = this.surname !== undefined ? this.surname : <any>null;
        data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : <any>null;
        data["isActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        if (Array.isArray(this.roleNames)) {
            data["roleNames"] = [];
            for (let item of this.roleNames)
                data["roleNames"].push(item);
        }
        data["password"] = this.password !== undefined ? this.password : <any>null;
        return data; 
    }
}

export class UserDto {
    userName!: string;
    name!: string;
    surname!: string;
    emailAddress!: string;
    isActive!: boolean | null;
    fullName!: string | null;
    lastLoginTime!: Date | null;
    creationTime!: Date | null;
    roleNames!: string[] | null;
    id!: number | null;

    init(data?: any, _mappings?: any) {
        if (data) {
            this.userName = data["userName"] !== undefined ? data["userName"] : <any>null;
            this.name = data["name"] !== undefined ? data["name"] : <any>null;
            this.surname = data["surname"] !== undefined ? data["surname"] : <any>null;
            this.emailAddress = data["emailAddress"] !== undefined ? data["emailAddress"] : <any>null;
            this.isActive = data["isActive"] !== undefined ? data["isActive"] : <any>null;
            this.fullName = data["fullName"] !== undefined ? data["fullName"] : <any>null;
            this.lastLoginTime = data["lastLoginTime"] ? new Date(data["lastLoginTime"].toString()) : <any>null;
            this.creationTime = data["creationTime"] ? new Date(data["creationTime"].toString()) : <any>null;
            if (Array.isArray(data["roleNames"])) {
                this.roleNames = [] as any;
                for (let item of data["roleNames"])
                    this.roleNames!.push(item);
            }
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): UserDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<UserDto>(data, _mappings, UserDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName !== undefined ? this.userName : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["surname"] = this.surname !== undefined ? this.surname : <any>null;
        data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : <any>null;
        data["isActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["fullName"] = this.fullName !== undefined ? this.fullName : <any>null;
        data["lastLoginTime"] = this.lastLoginTime ? this.lastLoginTime.toISOString() : <any>null;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>null;
        if (Array.isArray(this.roleNames)) {
            data["roleNames"] = [];
            for (let item of this.roleNames)
                data["roleNames"].push(item);
        }
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export class ListResultDtoOfRoleDto {
    items!: RoleDto[] | null;

    init(data?: any, _mappings?: any) {
        if (data) {
            if (Array.isArray(data["items"])) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(RoleDto.fromJS(item, _mappings));
            }
        }
    }

    static fromJS(data: any, _mappings?: any): ListResultDtoOfRoleDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<ListResultDtoOfRoleDto>(data, _mappings, ListResultDtoOfRoleDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export class ChangeUserLanguageDto {
    languageName!: string;

    init(data?: any, _mappings?: any) {
        if (data) {
            this.languageName = data["languageName"] !== undefined ? data["languageName"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): ChangeUserLanguageDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<ChangeUserLanguageDto>(data, _mappings, ChangeUserLanguageDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["languageName"] = this.languageName !== undefined ? this.languageName : <any>null;
        return data; 
    }
}

export class ChangePasswordDto {
    currentPassword!: string;
    newPassword!: string;

    init(data?: any, _mappings?: any) {
        if (data) {
            this.currentPassword = data["currentPassword"] !== undefined ? data["currentPassword"] : <any>null;
            this.newPassword = data["newPassword"] !== undefined ? data["newPassword"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): ChangePasswordDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<ChangePasswordDto>(data, _mappings, ChangePasswordDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["currentPassword"] = this.currentPassword !== undefined ? this.currentPassword : <any>null;
        data["newPassword"] = this.newPassword !== undefined ? this.newPassword : <any>null;
        return data; 
    }
}

export class ResetPasswordDto {
    adminPassword!: string;
    userId!: number;
    newPassword!: string;

    init(data?: any, _mappings?: any) {
        if (data) {
            this.adminPassword = data["adminPassword"] !== undefined ? data["adminPassword"] : <any>null;
            this.userId = data["userId"] !== undefined ? data["userId"] : <any>null;
            this.newPassword = data["newPassword"] !== undefined ? data["newPassword"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): ResetPasswordDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<ResetPasswordDto>(data, _mappings, ResetPasswordDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["adminPassword"] = this.adminPassword !== undefined ? this.adminPassword : <any>null;
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        data["newPassword"] = this.newPassword !== undefined ? this.newPassword : <any>null;
        return data; 
    }
}

export class PagedResultDtoOfUserDto {
    totalCount!: number | null;
    items!: UserDto[] | null;

    init(data?: any, _mappings?: any) {
        if (data) {
            this.totalCount = data["totalCount"] !== undefined ? data["totalCount"] : <any>null;
            if (Array.isArray(data["items"])) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(UserDto.fromJS(item, _mappings));
            }
        }
    }

    static fromJS(data: any, _mappings?: any): PagedResultDtoOfUserDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<PagedResultDtoOfUserDto>(data, _mappings, PagedResultDtoOfUserDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : <any>null;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

function jsonParse(json: any, reviver?: any) {
    json = JSON.parse(json, reviver);

    var byid: any = {};
    var refs: any = [];
    json = (function recurse(obj: any, prop?: any, parent?: any) {
        if (typeof obj !== 'object' || !obj)
            return obj;
        
        if ("$ref" in obj) {
            let ref = obj.$ref;
            if (ref in byid)
                return byid[ref];
            refs.push([parent, prop, ref]);
            return undefined;
        } else if ("$id" in obj) {
            let id = obj.$id;
            delete obj.$id;
            if ("$values" in obj)
                obj = obj.$values;
            byid[id] = obj;
        }
        
        if (Array.isArray(obj)) {
            obj = obj.map((v, i) => recurse(v, i, obj));
        } else {
            for (var p in obj) {
                if (obj.hasOwnProperty(p) && obj[p] && typeof obj[p] === 'object')
                    obj[p] = recurse(obj[p], p, obj);
            }
        }

        return obj;
    })(json);

    for (let i = 0; i < refs.length; i++) {
        const ref = refs[i];
        ref[0][ref[1]] = byid[ref[2]];
    }

    return json;
}

function createInstance<T>(data: any, mappings: any, type: any): T {
    if (!mappings)
        mappings = [];
    else {
        let mapping = mappings.filter((m: any) => m.source === data);
        if (mapping.length === 1)
            return <T>mapping[0].target;
    }

    let result: any = new type();
    mappings.push({ source: data, target: result });
    result.init(data, mappings);
    return result;
}

export class ApiException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}